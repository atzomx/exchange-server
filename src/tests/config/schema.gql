# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type Direction {
  _id: ID!
  extraIndications: String!
  name: String!
  neighborhood: String!
  normalizedFullDirection: String!
  outdoorNumber: Float!
  owner: String!
  state: String!
  street: String!
  town: String!
  zipCode: String!
}

input DirectionInputCreate {
  extraIndications: String
  name: String!
  neighborhood: String!
  outdoorNumber: Float!
  owner: String!
  state: String!
  street: String!
  town: String!
  zipCode: String!
}

input DirectionInputUpdate {
  extraIndications: String
  name: String
  neighborhood: String
  outdoorNumber: Float
  state: String
  street: String
  town: String
  zipCode: String
}

type DirectionPaginateResponse {
  """Pagination information."""
  info: PaginateInfo!

  """Requested information."""
  results: [Direction!]!
}

type Exchange {
  _id: ID!
  amount: Float!
  buller: String!
  code: String!
  description: String!
  indications: String!
  seller: String!
  share: Float!
  status: ExhangeStatus!
  type: ExhangeTypes!
}

input ExchangeInputCreate {
  amount: Float!
  buller: String!
  description: String!
  indications: String!
  seller: String!
  status: ExhangeStatus!
  type: ExhangeTypes!
}

input ExchangeInputUpdate {
  amount: Float!
  description: String!
  indications: String!
  type: ExhangeTypes!
}

type ExchangePaginateResponse {
  """Pagination information."""
  info: PaginateInfo!

  """Requested information."""
  results: [Exchange!]!
}

"""Exhange Status"""
enum ExhangeStatus {
  accepted
  pending
  processing
  rejected
  validating
}

"""Exhange Types"""
enum ExhangeTypes {
  product
  service
}

"""People gender"""
enum Gender {
  female
  male
  other
}

type LoginResponse {
  token: String!
}

type Meeting {
  _id: ID!
  binnacle: String!
  date: DateTime!
  exchangeId: String!
  place: String!
  status: String!
}

input MeetingInputCreate {
  binnacle: String!
  date: DateTime!
  exchangeId: String!
  place: String!
  status: String!
}

input MeetingInputUpdate {
  binnacle: String
  date: DateTime
  place: String
  status: String
}

type MeetingPaginateResponse {
  """Pagination information."""
  info: PaginateInfo!

  """Requested information."""
  results: [Meeting!]!
}

type Mutation {
  """Register a new direction."""
  directionCreate(data: DirectionInputCreate!): Direction!

  """Update an existing direction by id."""
  directionUpdate(data: DirectionInputUpdate!, id: String!): Direction!

  """Register a new exchange."""
  exchangeCreate(data: ExchangeInputCreate!): Exchange!

  """Update an existing exchange by id."""
  exchangeUpdate(data: ExchangeInputUpdate!, id: String!): Exchange!
  meetingCreate(data: MeetingInputCreate!): Meeting!
  meetingUpdate(data: MeetingInputUpdate!, id: String!): Meeting!
  shippingCreate(data: ShippingInputCreate!): Shipping!

  """shippingUpdate"""
  update(data: ShippingInputUpdate!, id: String!): Shipping!

  """Register a new user."""
  userCreate(data: UserInputCreate!): User!

  """Returns user token"""
  userLogin(password: String!, userName: String!): LoginResponse!

  """Update an existing user by id."""
  userUpdate(data: UserInputUpdate!, id: String!): User!
}

type PaginateInfo {
  """Current page."""
  page: Int!

  """Number of pages."""
  pages: Int!

  """Total number of records on page."""
  total: Int!
}

type Query {
  """Returns one direction by id."""
  directionById(id: String!): Direction!

  """Returns an array of direction."""
  directionPaginate(
    """Records limit per page."""
    limit: Int = 10
    owner: String

    """Selected page."""
    page: Int = 1
    search: String
  ): DirectionPaginateResponse!

  """Returns one exchange by id"""
  exchangeById(id: String!): Exchange!

  """Returns an array of exchanges"""
  exchangePaginate(
    """Records limit per page."""
    limit: Int = 10

    """Selected page."""
    page: Int = 1
  ): ExchangePaginateResponse!

  """Returns one meeting by id."""
  meetingById(id: String!): Meeting!

  """Returns an array of meetings."""
  meetingPaginate(
    exchangeId: String

    """Records limit per page."""
    limit: Int = 10

    """Selected page."""
    page: Int = 1
  ): MeetingPaginateResponse!

  """Returns one Shipping by id"""
  shippingById(id: String!): Shipping!

  """Returns an array of Shipping"""
  shippingPaginate(
    exchangeId: String

    """Records limit per page."""
    limit: Int = 10

    """Selected page."""
    page: Int = 1
  ): ShippingPaginateResponse!

  """Returns one user by id"""
  userById(id: String!): User!

  """Returns an array of users."""
  userPaginate(
    """User start creation date."""
    endDate: DateTime

    """User gender."""
    gender: Gender

    """Records limit per page."""
    limit: Int = 10

    """Selected page."""
    page: Int = 1

    """User search text."""
    search: String

    """User start creation date."""
    startDate: DateTime

    """User status."""
    status: Status
  ): UserPaginateResponse!
}

type Shipping {
  _id: ID!
  binnacle: String!
  destination: String!
  exchangeId: String!
  origin: String!
  status: String!
  trackingGuide: String!
}

input ShippingInputCreate {
  binnacle: String!
  destination: String!
  exchangeId: String!
  origin: String!
  status: String!
  trackingGuide: String!
}

input ShippingInputUpdate {
  binnacle: String
  destination: String
  origin: String
  status: String
  trackingGuide: String
}

type ShippingPaginateResponse {
  """Pagination information."""
  info: PaginateInfo!

  """Requested information."""
  results: [Shipping!]!
}

"""User status"""
enum Status {
  active
  banned
  pending
}

type User {
  """User identifier."""
  _id: ID!

  """User birthday YYYY-MM-DD."""
  birthday: DateTime!

  """Identifying number."""
  curp: String!

  """User directions."""
  directions: [Direction!]!

  """User email."""
  email: String!

  """First name of user."""
  firstName: String!

  """User gender."""
  gender: Gender!

  """User profile image."""
  image: String!

  """User last name."""
  lastName: String!

  """Normalized user full name."""
  normalizedFullName: String!

  """User phone number."""
  phoneNumber: String!

  """User second last name."""
  secondLastName: String!

  """User status."""
  status: Status!

  """Username."""
  userName: String!
}

input UserInputCreate {
  """User birthday YYYY-MM-DD."""
  birthday: DateTime!

  """Identifying number."""
  curp: String!

  """User email."""
  email: String!

  """First name of user."""
  firstName: String!

  """User gender."""
  gender: Gender!

  """User profile image."""
  image: String!

  """User last name."""
  lastName: String!
  password: String!

  """User phone number."""
  phoneNumber: String!

  """User second last name."""
  secondLastName: String

  """Username."""
  userName: String!
}

input UserInputUpdate {
  """User birthday YYYY-MM-DD."""
  birthday: DateTime

  """Identifying number."""
  curp: String

  """First name of user."""
  firstName: String

  """User gender."""
  gender: Gender

  """User last name."""
  lastName: String

  """User phone number."""
  phoneNumber: String

  """User second last name."""
  secondLastName: String
}

type UserPaginateResponse {
  """Pagination information."""
  info: PaginateInfo!

  """Requested information."""
  results: [User!]!
}
